#!/usr/bin/env node
var markitup = require('../lib/markitup'),
    fs = require('fs'),
    path = require('path'),
    async = require('async'),
    walk = require('walk'),
    argv = require('optimist')
        .usage('Usage: $0 [input file|directory list]')
        .string(['output', 'template'])
        .boolean('unsafe')
        .boolean('pages')
        .describe({ template: 'Template for HTML output', output: 'Output directory', unsafe: 'Allow embedding HTML', pages: 'Automatically create anchor tags for pagination' })
        .alias({ template: 't', input: 'i', output: 'o', unsafe: 'u', pages: 'p' })
        .check(function (args) { 
            if (args._.length === 0) throw 'Input not specified';
            if (args.o && !path.existsSync(args.o)) throw 'Output directory does not exist';
            if (args.t) {
                if (path.extname(args.t) !== '.jade') throw 'Template file must be jade';
                if (!path.existsSync(args.t)) throw 'Template file does not exist';
            }
        })
        .argv;

var outPath = argv.o,
    template = argv.t,
    unsafe = argv.u,
    autoPages = argv.p;

function process_item(name, callback) {
    fs.stat(name, function (err, stats) {
        if (err) {
            callback(new Error('error opening ' + name));
        } else {
            if (stats.isFile()) {
                if (name.match(/\.md$|\.markdown$/)) {
                    console.log('processing', name);
                    markitup.generate_doc(name, outPath, template, unsafe, autoPages, function (err, output) {
                        callback();
                    });
                } else {
                    console.log('skipping unsupported file', name);
                }
            } else if (stats.isDirectory()) {
                var walker = walk.walk(name);
                walker.on('file', function (root, fileStats, next) {
                var file = path.join(root, fileStats.name);
                    if (file.match(/\.md$/)) {
                        console.log('processing', file);
                        markitup.generate_doc(file, outPath, template, unsafe, autoPages, function (err, output) {
                            next();
                        });
                    } else {
                        console.log('skipping unsupported file', file);
                        next();
                    }
                });
                walker.on('end', function () {
                    callback();
                });
            }
        }
    });
}

async.mapSeries(argv._, process_item, function (err) {
    if (err) {
        console.log(err);
        process.exit(1);
    }
});
